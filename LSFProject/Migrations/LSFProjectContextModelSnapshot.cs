// <auto-generated />
using System;
using LSFProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LSFProject.Migrations
{
    [DbContext(typeof(LSFProjectContext))]
    partial class LSFProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("LSFProject.AspNetFavTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("TargetId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TargetId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetFavTargets");
                });

            modelBuilder.Entity("LSFProject.AspNetFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateAdd")
                        .HasColumnType("datetime");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Photo")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetFiles");
                });

            modelBuilder.Entity("LSFProject.AspNetForum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Questions")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Questions");

                    b.HasIndex("Status");

                    b.ToTable("AspNetForum");
                });

            modelBuilder.Entity("LSFProject.AspNetForumAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Question")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("Author");

                    b.HasIndex("Question");

                    b.ToTable("AspNetForumAnswers");
                });

            modelBuilder.Entity("LSFProject.AspNetForumQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Author");

                    b.ToTable("AspNetForumQuestion");
                });

            modelBuilder.Entity("LSFProject.AspNetForumStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetForumStatus");
                });

            modelBuilder.Entity("LSFProject.AspNetIcon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Icon")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetIcons");
                });

            modelBuilder.Entity("LSFProject.AspNetNews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("PreviewPhoto")
                        .HasColumnType("int")
                        .HasColumnName("Preview_Photo");

                    b.Property<string>("PreviewText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Preview_Text");

                    b.Property<int?>("Share")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Watching")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Author");

                    b.HasIndex("PreviewPhoto");

                    b.ToTable("AspNetNews");
                });

            modelBuilder.Entity("LSFProject.AspNetNewsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetNewsCategories");
                });

            modelBuilder.Entity("LSFProject.AspNetNewsComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Answer")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Answer");

                    b.HasIndex("NewsId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetNewsComments");
                });

            modelBuilder.Entity("LSFProject.AspNetPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.ToTable("AspNetPages");
                });

            modelBuilder.Entity("LSFProject.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("LSFProject.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("LSFProject.AspNetTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatesIds")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StatesIDs");

                    b.HasKey("Id");

                    b.ToTable("AspNetTargets");
                });

            modelBuilder.Entity("LSFProject.AspNetTraficRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AspNetTraficRules");
                });

            modelBuilder.Entity("LSFProject.AspNetTreeMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Main")
                        .HasColumnType("bit");

                    b.Property<int?>("Parent")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Parent");

                    b.ToTable("AspNetTreeMenu");
                });

            modelBuilder.Entity("LSFProject.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Icon")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Icon");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LSFProject.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("LSFProject.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("LSFProject.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("LSFProject.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LSFProject.AspNetFavTarget", b =>
                {
                    b.HasOne("LSFProject.AspNetTarget", "Target")
                        .WithMany("AspNetFavTargets")
                        .HasForeignKey("TargetId")
                        .HasConstraintName("FK_AspNetFavTargets_AspNetTargets");

                    b.HasOne("LSFProject.AspNetUser", "User")
                        .WithMany("AspNetFavTargets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetFavTargets_AspNetUsers");

                    b.Navigation("Target");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LSFProject.AspNetForum", b =>
                {
                    b.HasOne("LSFProject.AspNetForumQuestion", "QuestionsNavigation")
                        .WithMany("AspNetForums")
                        .HasForeignKey("Questions")
                        .HasConstraintName("FK_AspNetForum_AspNetForumQuestion")
                        .IsRequired();

                    b.HasOne("LSFProject.AspNetForumStatus", "StatusNavigation")
                        .WithMany("AspNetForums")
                        .HasForeignKey("Status")
                        .HasConstraintName("FK_AspNetForum_AspNetForumStatus")
                        .IsRequired();

                    b.Navigation("QuestionsNavigation");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("LSFProject.AspNetForumAnswer", b =>
                {
                    b.HasOne("LSFProject.AspNetForumAnswer", "Answer")
                        .WithMany("InverseAnswer")
                        .HasForeignKey("AnswerId")
                        .HasConstraintName("FK_AspNetForumAnswers_AspNetForumAnswers");

                    b.HasOne("LSFProject.AspNetUser", "AuthorNavigation")
                        .WithMany("AspNetForumAnswers")
                        .HasForeignKey("Author")
                        .HasConstraintName("FK_AspNetForumAnswers_AspNetUsers");

                    b.HasOne("LSFProject.AspNetForumQuestion", "QuestionNavigation")
                        .WithMany("AspNetForumAnswers")
                        .HasForeignKey("Question")
                        .HasConstraintName("FK_AspNetForumAnswers_AspNetForumQuestion")
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("AuthorNavigation");

                    b.Navigation("QuestionNavigation");
                });

            modelBuilder.Entity("LSFProject.AspNetForumQuestion", b =>
                {
                    b.HasOne("LSFProject.AspNetUser", "AuthorNavigation")
                        .WithMany("AspNetForumQuestions")
                        .HasForeignKey("Author")
                        .HasConstraintName("FK_AspNetForumQuestion_AspNetUsers")
                        .IsRequired();

                    b.Navigation("AuthorNavigation");
                });

            modelBuilder.Entity("LSFProject.AspNetNews", b =>
                {
                    b.HasOne("LSFProject.AspNetUser", "AuthorNavigation")
                        .WithMany("AspNetNews")
                        .HasForeignKey("Author")
                        .HasConstraintName("FK_AspNetNews_AspNetUsers")
                        .IsRequired();

                    b.HasOne("LSFProject.AspNetFile", "PreviewPhotoNavigation")
                        .WithMany("AspNetNews")
                        .HasForeignKey("PreviewPhoto")
                        .HasConstraintName("FK_AspNetNews_AspNetFiles")
                        .IsRequired();

                    b.Navigation("AuthorNavigation");

                    b.Navigation("PreviewPhotoNavigation");
                });

            modelBuilder.Entity("LSFProject.AspNetNewsComment", b =>
                {
                    b.HasOne("LSFProject.AspNetNewsComment", "AnswerNavigation")
                        .WithMany("InverseAnswerNavigation")
                        .HasForeignKey("Answer")
                        .HasConstraintName("FK_AspNetNewsComments_AspNetNewsComments");

                    b.HasOne("LSFProject.AspNetNews", "News")
                        .WithMany("AspNetNewsComments")
                        .HasForeignKey("NewsId")
                        .HasConstraintName("FK_AspNetNewsComments_AspNetNews")
                        .IsRequired();

                    b.HasOne("LSFProject.AspNetUser", "User")
                        .WithMany("AspNetNewsComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetNewsComments_AspNetUsers")
                        .IsRequired();

                    b.Navigation("AnswerNavigation");

                    b.Navigation("News");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LSFProject.AspNetPage", b =>
                {
                    b.HasOne("LSFProject.AspNetNewsCategory", "CategoryNavigation")
                        .WithMany("AspNetPages")
                        .HasForeignKey("Category")
                        .HasConstraintName("FK_AspNetPages_AspNetNewsCategories")
                        .IsRequired();

                    b.Navigation("CategoryNavigation");
                });

            modelBuilder.Entity("LSFProject.AspNetRoleClaim", b =>
                {
                    b.HasOne("LSFProject.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LSFProject.AspNetTreeMenu", b =>
                {
                    b.HasOne("LSFProject.AspNetTreeMenu", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("FK_AspNetTreeMenu_AspNetTreeMenu");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("LSFProject.AspNetUser", b =>
                {
                    b.HasOne("LSFProject.AspNetIcon", "IconNavigation")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("Icon")
                        .HasConstraintName("FK_AspNetUsers_AspNetIcons");

                    b.Navigation("IconNavigation");
                });

            modelBuilder.Entity("LSFProject.AspNetUserClaim", b =>
                {
                    b.HasOne("LSFProject.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LSFProject.AspNetUserLogin", b =>
                {
                    b.HasOne("LSFProject.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LSFProject.AspNetUserRole", b =>
                {
                    b.HasOne("LSFProject.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSFProject.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LSFProject.AspNetUserToken", b =>
                {
                    b.HasOne("LSFProject.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LSFProject.AspNetFile", b =>
                {
                    b.Navigation("AspNetNews");
                });

            modelBuilder.Entity("LSFProject.AspNetForumAnswer", b =>
                {
                    b.Navigation("InverseAnswer");
                });

            modelBuilder.Entity("LSFProject.AspNetForumQuestion", b =>
                {
                    b.Navigation("AspNetForumAnswers");

                    b.Navigation("AspNetForums");
                });

            modelBuilder.Entity("LSFProject.AspNetForumStatus", b =>
                {
                    b.Navigation("AspNetForums");
                });

            modelBuilder.Entity("LSFProject.AspNetIcon", b =>
                {
                    b.Navigation("AspNetUsers");
                });

            modelBuilder.Entity("LSFProject.AspNetNews", b =>
                {
                    b.Navigation("AspNetNewsComments");
                });

            modelBuilder.Entity("LSFProject.AspNetNewsCategory", b =>
                {
                    b.Navigation("AspNetPages");
                });

            modelBuilder.Entity("LSFProject.AspNetNewsComment", b =>
                {
                    b.Navigation("InverseAnswerNavigation");
                });

            modelBuilder.Entity("LSFProject.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("LSFProject.AspNetTarget", b =>
                {
                    b.Navigation("AspNetFavTargets");
                });

            modelBuilder.Entity("LSFProject.AspNetTreeMenu", b =>
                {
                    b.Navigation("InverseParentNavigation");
                });

            modelBuilder.Entity("LSFProject.AspNetUser", b =>
                {
                    b.Navigation("AspNetFavTargets");

                    b.Navigation("AspNetForumAnswers");

                    b.Navigation("AspNetForumQuestions");

                    b.Navigation("AspNetNews");

                    b.Navigation("AspNetNewsComments");

                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
